<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.life.mapper.LifeOrderMapper">

    <resultMap type="LifeOrder" id="LifeOrderResult">
        <result property="orderId"    column="order_id"    />
        <result property="verificationCode" column="verification_code"/>
        <result property="pid"    column="pid"    />
        <result property="courseType"    column="course_type"    />
        <result property="status"    column="status"    />
        <result property="userId"    column="user_id"    />
        <result property="shareId"    column="share_id"    />
        <result property="courseId"    column="course_id"    />
        <result property="courseDetailId"    column="course_detail_id"    />
        <result property="remark"    column="remark"    />
        <result property="checkId"    column="check_id"    />
        <result property="couponId"    column="coupon_id"    />
        <result property="saleUser"    column="sale_user"    />
        <result property="total"    column="total"    />
        <result property="discounts"    column="discounts"    />
        <result property="pay"    column="pay"    />
        <result property="linkman"    column="linkman"    />
        <result property="phone"    column="phone"    />
        <result property="donate"    column="donate"    />
        <result property="courseDuration"    column="course_duration"    />
        <result property="consumeTime"    column="consume_time"    />
        <result property="orderTime"    column="order_time"    />
        <result property="useTime"    column="use_time"    />
        <result property="validRefundTime"    column="valid_refund_time"    />
        <result property="deleteFlag"    column="delete_flag"    />
        <result property="mchRemark"    column="mch_remark"    />
    </resultMap>

    <sql id="selectLifeOrderVo">
        select order_id,verification_code, pid,
         course_type, status, user_id, share_id,
         course_id, course_detail_id, remark,
         check_id, coupon_id, sale_user, total,
         discounts, pay, linkman, phone, donate,
         course_duration, consume_time, order_time,
         use_time, valid_refund_time, delete_flag,mch_remark from life_order
    </sql>



    <select id="selectLifeOrderById" parameterType="long" resultMap="LifeOrderResult">
        <include refid="selectLifeOrderVo"/>
        where order_id = #{orderId}
    </select>

    <insert id="insertLifeOrder" parameterType="LifeOrder">
        insert into life_order
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="verificationCode != null  and verificationCode != ''">verification_code,</if>
            <if test="pid != null ">pid,</if>
            <if test="courseType != null ">course_type,</if>
            <if test="status != null ">status,</if>
            <if test="userId != null ">user_id,</if>
            <if test="shareId != null ">share_id,</if>
            <if test="courseId != null ">course_id,</if>
            <if test="courseDetailId != null ">course_detail_id,</if>
            <if test="remark != null  and remark != ''">remark,</if>
            <if test="checkId != null ">check_id,</if>
            <if test="couponId != null ">coupon_id,</if>
            <if test="saleUser != null ">sale_user,</if>
            <if test="total != null ">total,</if>
            <if test="discounts != null ">discounts,</if>
            <if test="pay != null ">pay,</if>
            <if test="linkman != null  and linkman != ''">linkman,</if>
            <if test="phone != null  and phone != ''">phone,</if>
            <if test="donate != null ">donate,</if>
            <if test="courseDuration != null ">course_duration,</if>
            <if test="consumeTime != null ">consume_time,</if>
            <if test="orderTime != null ">order_time,</if>
            <if test="useTime != null ">use_time,</if>
            <if test="validRefundTime != null ">valid_refund_time,</if>
            <if test="deleteFlag != null ">delete_flag,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="verificationCode != null  and verificationCode != ''">#{verificationCode},</if>
            <if test="pid != null ">#{pid},</if>
            <if test="courseType != null ">#{courseType},</if>
            <if test="status != null ">#{status},</if>
            <if test="userId != null ">#{userId},</if>
            <if test="shareId != null ">#{shareId},</if>
            <if test="courseId != null ">#{courseId},</if>
            <if test="courseDetailId != null ">#{courseDetailId},</if>
            <if test="remark != null  and remark != ''">#{remark},</if>
            <if test="checkId != null ">#{checkId},</if>
            <if test="couponId != null ">#{couponId},</if>
            <if test="saleUser != null ">#{saleUser},</if>
            <if test="total != null ">#{total},</if>
            <if test="discounts != null ">#{discounts},</if>
            <if test="pay != null ">#{pay},</if>
            <if test="linkman != null  and linkman != ''">#{linkman},</if>
            <if test="phone != null  and phone != ''">#{phone},</if>
            <if test="donate != null ">#{donate},</if>
            <if test="courseDuration != null ">#{courseDuration},</if>
            <if test="consumeTime != null ">#{consumeTime},</if>
            <if test="orderTime != null ">#{orderTime},</if>
            <if test="useTime != null ">#{useTime},</if>
            <if test="validRefundTime != null ">#{validRefundTime},</if>
            <if test="deleteFlag != null ">#{deleteFlag},</if>
        </trim>
    </insert>







    <select id="selectNowOrder" resultType="string" >
        select distinct phone from life_order
        where date_format(use_time,'%Y-%m-%d') = current_date and course_detail_id = #{courseDetailId} and status = 201
    </select>



    <insert id="insertLifeOrders" useGeneratedKeys="true" keyProperty="orderId">
        insert life_order(
        verification_code,
        pid,
        course_type,
        status, user_id,
        share_id,
        course_id,
        course_detail_id,
        remark,
        coupon_id,
        sale_user,
        total,
        discounts,
        pay,
        linkman,
        phone,
        donate,
        course_duration,
        order_time,
        use_time,
        valid_refund_time
        )
        values
        <foreach collection="list" item="item"  separator="," >
            (
            #{item.verificationCode},
            #{item.pid},
            #{item.courseType},
            #{item.status},
            #{item.userId},
            #{item.shareId},
            #{item.courseId},
            #{item.courseDetailId},
            #{item.remark},
            #{item.couponId},
            #{item.saleUser},
            #{item.total},
            #{item.discounts},
            #{item.pay},
            #{item.linkman},
            #{item.phone},
            #{item.donate},
            #{item.courseDuration},
            #{item.orderTime},
            #{item.useTime},
            #{item.validRefundTime}
            )
        </foreach>
    </insert>




    <update id="donateOrder">
        update life_order set donate = 0
        where share_id = #{shareId}
        AND (
          sale_user = -1 and user_id = #{userId} or sale_user = 0 and user_id != #{userId}
        )
        AND
        consume_time >= #{start}
        AND
        status = 401
        AND
        donate = 1
    </update>


    <select id="getNowCourseDuration" resultType="java.lang.Long">
        select sum(course_duration) from life_order
        where share_id = #{shareId}
        AND (
          sale_user = -1 and user_id = #{userId} or sale_user = 0 and user_id != #{userId}
        )
        AND
        consume_time >= #{start}
        AND
        status = 401
        AND
        donate = 1
        GROUP BY donate
    </select>






    <select id="selectLifeOrderDetailBySearchVo"
            resultType="com.ruoyi.life.domain.vo.system.LifeOrderDetailVo">
        select
            `order`.order_id as orderId,
            `order`.verification_code as verificationCode,
            course.course_type as courseType,
            `order`.`status` as `status`,
            `user`.phone as userPhone,
            `order`.linkman as linkman,
            `order`.phone as linkmanPhone,
            course.course_id as courseId,
            course.`name` as  courseName,
            receive.receive_id as recerveId,
            coupon.coupon_id as couponId,
            coupon.name as couponName,
            if(child.`name` is null ,`order`.sale_user,child.`name`)  as beneficiary ,
            `order`.pid as payType,
            `order`.total as total,
            `order`.discounts as discounts,
            `order`.pay as pay,
            `order`.course_duration as courseDuration,
            `order`.order_time as orderTime,
            `order`.use_time as useTime,
            `order`.valid_refund_time as validRefundTime,
            if(course.course_kind = 0,'后台',business.name) as terrace,
            if(course.course_kind = 0,sysuser.user_name,businessuser.nick_name) as checkName,
            `order`.consume_time as consumeTime,
            `order`.mch_remark as mchRemark
        from life_order as `order`
        inner join life_user as `user` on `user`.user_id = `order`.user_id
        inner join life_course as course on course.course_id = `order`.course_id
        left join life_coupon_receive as receive on receive.receive_id = `order`.coupon_id
        left join life_coupon as coupon on coupon.coupon_id = receive.coupon_id
        left join life_user_child as child on child.child_id = `order`.sale_user
        left join life_business_user as businessuser on businessuser.user_id = `order`.check_id
        left join life_business as business on business.business_id = businessuser.business_id
        left join sys_user as sysuser on sysuser.user_id = `order`.check_id
        <trim prefix="where " suffixOverrides="and|or">
            <if test="orderId != null">
                `order`.order_id = #{orderId} and
            </if>
            <if test="payType != null">
                `order`.pid = #{payType} and
            </if>
            <if test="courseType">
              `order`.course_type = #{courseType} and
            </if>
            <if test="status != null">
              `order`.status = #{status} and
            </if>
            <if test="userPhone != null and userPhone !=''">
              `user`.phone = #{userPhone} and
            </if>
            <if test="courseName != null and courseName != ''">
                `course`.name like concat('%',#{courseName},'%')  and
            </if>
            <if test="linkmanPhone != null and linkmanPhone != ''">
                `order`.linkmanPhone = #{linkPhone} and
            </if>
            <if test="verificationCode != null and verificationCode != ''">
                `order`.verification_code = #{verificationCode} and
            </if>
            <choose>
                <when test="orderTimeStart != null and orderTimeEnd != null">
                    `order`.order_time >= #{orderTimeStart} and #{orderTimeEnd} >= `order`.order_time
                </when>
                <when test="orderTimeStart != null">
                    `order`.order_time >= #{orderTimeStart} and
                </when>
                <when test="orderTimeEnd != null">
                    #{orderTimeEnd} >= `order`.order_time and
                </when>
            </choose>
        </trim>

    </select>
    <select id="selectLifeOrderVoBySearchVo" resultType="com.ruoyi.life.domain.vo.system.LifeOrderVo">
        select
            `order`.order_id as orderId,
            `order`.verification_code as verificationCode,
            `order`.pid as payType,
            `order`.course_type as courseType,
            `order`.status as status,
            `user`.phone as userPhone,
            `course`.name as courseName,
            `coupon`.name as couponName,
            `order`.pay as pay,
            `order`.order_time as orderTime,
            `order`.mch_remark as mchRemark
        from life_order as `order`
        inner join life_user as `user` on `user`.user_id = `order`.user_id
        inner join life_course as course on course.course_id = `order`.course_id
        left join life_coupon_receive as receive on receive.receive_id = `order`.coupon_id
        left join life_coupon as coupon on coupon.coupon_id = receive.coupon_id
        left join sys_user as sysuser on sysuser.user_id = `order`.check_id
        <trim prefix="where " suffixOverrides="and|or">
            <if test="orderId != null">
                `order`.orderId = #{orderId} and
            </if>
            <if test="payType != null">
                `order`.pid = #{payType} and
            </if>
            <if test="courseType">
                `order`.course_type = #{courseType} and
            </if>
            <if test="status != null">
                `order`.status = #{status} and
            </if>
            <if test="userPhone != null and userPhone !=''">
                `user`.phone = #{userPhone} and
            </if>
            <if test="courseName != null and courseName != ''">
                `course`.name like concat('%',#{courseName},'%')  and
            </if>
            <if test="linkmanPhone != null and linkmanPhone != ''">
                `order`.linkmanPhone = #{linkPhone} and
            </if>
            <if test="verificationCode != null and verificationCode != ''">
                `order`.verification_code = #{verificationCode} and
            </if>
            <choose>
                <when test="orderTimeStart != null and orderTimeEnd != null">
                    `order`.order_time >= #{orderTimeStart} and #{orderTimeEnd} >= `order`.order_time
                </when>
                <when test="orderTimeStart != null">
                    `order`.order_time >= #{orderTimeStart} and
                </when>
                <when test="orderTimeEnd != null">
                    #{orderTimeEnd} >= `order`.order_time and
                </when>
            </choose>
        </trim>
    </select>


    <select id="orderRefundFlag" resultType="java.lang.Integer">
        select count(0) from life_order
        where status != 301 and order_id in 
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <update id="verificationOrder">
        update life_order set status = 401,check_id = #{checkId},consume_time = now()
        where order_id = #{orderId} and status = 201
    </update>

    <select id="getExcelOrderVo" resultType="com.ruoyi.life.domain.vo.system.LifeExcelRebateOrderVo">
       SELECT
        `order`.verification_code AS orderSn,
        `user`.phone AS phone,
        `order`.pid AS payType,
        `order`.pay AS pay,
        `order`.order_time AS orderTime,
        `order`.consume_time AS consumeTime
      FROM
        life_order AS `order`
      INNER JOIN life_user AS `user` ON `user`.user_id = `order`.user_id
      where  `user`.lead_id = #{leadId} and date_format(`order`.consume_time,'%Y') = #{year} and date_format(`order`.consume_time,'%m') = #{month}
    </select>


    <select id="getOrderChartData" resultType="com.ruoyi.life.domain.vo.system.LifeOrderChartDataDto">
        SELECT DATE_FORMAT(use_time,'%Y-%m-%d') as useTime,sum(pay) as pay,pid ,count(0) as orderNum  FROM `life_order`
        where status in (401,402)
        GROUP BY DATE_FORMAT(use_time,'%Y-%m-%d'),pid
        ORDER BY useTime
    </select>

    <update id="cancelOrder">
        update life_order set status = 102
        where share_id = #{shareId} and status = 101 and order_id in
        <foreach collection="orderIds" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </update>


    <select id="getBackCoupon" resultType="java.lang.Long">
        select coupon_id from life_order
        where order_id in
        <foreach collection="orderIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        and status in (102,103,302)
        group by coupon_id

    </select>
    <select id="filtrateBackCoupon" resultType="java.lang.Integer">
        select count(0) from life_order
        where coupon_id = #{couponId}
        and status not in (102,103,302)
    </select>
    <select id="getBackShareData" resultType="com.ruoyi.life.domain.LifeReserve">
        select count(0) as reserveNum,course_detail_id as courseDetailId,use_time as reserveNum from life_order
        where status in (102,103,302) and order_id in
        <foreach collection="orderIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        group by course_detail_id,use_time
    </select>


    <update id="payOrder">
        update life_order set status = 201
        where status = 101 and share_id = #{shareId} and  order_id in
        <foreach collection="orderIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>


    <select id="selectLifeOrderByIds" resultType="com.ruoyi.life.domain.dto.user.LifePayOrderDto">
        select sum(pay) as pay,pid as payType from life_order
        where order_id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        group by pid

    </select>

    <update id="refund">
        update life_order set status = 301
        where valid_refund_time >=now() and (share_id = #{shareId} or share_id is null and user_id = #{shareId}) and status = 201 and order_id in
        <foreach collection="orderIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <update id="cancelRefund">
        update life_order set status = 201
        where  (share_id = #{shareId} or share_id is null and user_id = #{shareId}) and status = 301 and order_id in
        <foreach collection="orderIds" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    <update id="refundSuccess">
        update life_order set status = 302
        where status = 301
    </update>



    <select id="getLifeOrderVo" resultType="com.ruoyi.life.domain.vo.user.LifeOrderDataVo">
        select
        `order`.order_id as orderId,
        `order`.verification_code as verificationCode,
        `order`.status as status,
        course.img_url as imgUrl,
        course.`name` as courseName,
        classify.img as classifyImg,
        classify.course_classify_name as classifyName,
        `order`.pay as pay,
        `order`.total as total,
        `order`.pid as payType,
        child.`name` as saleName,
        `order`.sale_user as saleUser
        from life_order as `order`
        inner join life_course as course on course.course_id = `order`.course_id
        inner join life_course_classify as classify on classify.course_classify_id = course.course_classify_id
        left join life_user_child as child on child.child_id = `order`.sale_user
        where `order`.share_id = #{shareId}
        <choose>
            <when test="status != null and status == 102">
                and `order`.status in (102,103)
            </when>
            <when test="status != null">
                and `order`.status = #{status}
            </when>
        </choose>
        <if test="flag">
            and order_time > date_SUB(now(), INTERVAL 3 DAY)
        </if>
        order by `order`.order_time desc
    </select>
    <select id="getLifeOrderDetailData" resultType="com.ruoyi.life.domain.vo.user.LifeOrderDetailDataVo">
         select
          `order`.order_id as orderId,
		  `order`.linkman as linkman,
		  `order`.phone as linkmanPhone,
		  `order`.status as status,
		  course.img_url as imgUrl,
		  course.`name` as courseName,
		  classify.img as classifyImg,
		  classify.course_classify_name as classifyName,
		  `order`.pay as pay,
          `order`.total as total,
          `order`.verification_code as verificationCode,
          `order`.use_time as useTime,
		  `order`.order_time as orderTime,
		  address.business_address_name as address,
		  `order`.valid_refund_time as validRefundTime,
		  child.`name` as saleName,
          `order`.sale_user as saleUser
        from
          life_order as `order`
          inner join life_course as course on course.course_id = `order`.course_id
          inner join life_course_classify as classify on classify.course_classify_id = course.course_classify_id
          left join life_user_child as child on child.child_id = `order`.sale_user
		  inner join life_business_address as address on course.business_address_id = address.business_address_id
        where `order`.order_id = #{orderId} and `order`.share_id = #{shareId}
    </select>
    <select id="selectRefundOrderByOrderIds" resultMap="LifeOrderResult">
        <include refid="selectLifeOrderVo"/>
        where status = 301 and order_id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <select id="selectLifeOrderByStartAndUserId" resultMap="LifeOrderResult">
        <include refid="selectLifeOrderVo"/>
        where share_id = #{shareId}
        and (
          sale_user = -1 and user_id = #{userId} or sale_user = 0 and user_id != #{userId}
        )
        and
        consume_time >= #{start}
        AND
        status = 401
    </select>
    <select id="get1WeekOrderCourseDuration"
            resultType="com.ruoyi.life.domain.vo.user.LifeDataVo$ScaleDrawing">
        SELECT
        	classify.course_classify_name AS name,
        	sum( `order`.course_duration ) AS min
        FROM
        	life_order AS `order`
        	INNER JOIN life_course AS course ON course.course_id = `order`.course_id
        	INNER JOIN life_course_classify AS classify ON course.course_classify_pid = classify.course_classify_id
        WHERE
        	share_id = #{shareId}
        	AND ( sale_user = - 1 AND user_id = #{userId} OR sale_user = 0 AND user_id != #{userId} )
        	AND DATE_FORMAT(`order`.consume_time ,'%Y-%m-%d') >= #{start}
        	AND #{end} >= DATE_FORMAT(`order`.consume_time ,'%Y-%m-%d')
        	AND `order`.STATUS = 401
        GROUP BY
	        course.course_classify_pid,classify.course_classify_name
    </select>



    <update id="setShareIdByUserId">
        update life_order set share_id = #{userId}
        where user_id = #{shareId}
    </update>


    <select id="getOrderVerificationFlag" resultType="java.lang.Integer">
        select count(0) from life_order
        where share_id = #{userId} and status = 201
    </select>
    <select id="pastOrderIdData" resultType="java.lang.Long">
        select order_id from life_order
        where status = 101 and order_time = #{orderTime}
    </select>

    <update id="past101Order">
        update life_order set status = 103
        where status = 101 and order_time = #{orderTime}
    </update>

    <select id="selectLifeOrderByVerificationCode" resultMap="LifeOrderResult">
        <include refid="selectLifeOrderVo"/>
        where verification_code = #{verificationCode}
    </select>
    <select id="getMchOrder" resultType="com.ruoyi.life.domain.vo.mch.LifeMchOrderVo">
        SELECT
	      `order`.order_id AS orderId,
	      `order`.verification_code AS verificationCode,
	      `user`.nick_name AS nickName,
	      `order`.consume_time AS consumeTime,
	      `order`.STATUS AS `status`,
	      course.course_id AS courseId,
	      course.img_url AS imgUrl,
	      course.NAME AS courseName,
	      classify.img AS classifyImgUrl,
	      classify.course_classify_name AS classifyName,
	      `order`.use_time AS useTime,
	      address.business_address_name AS addressName,
	      course.age_onset AS ageOnset,
	      course.age_end AS ageEnd,
	      course.price AS price
      FROM
	    life_order AS `order`
	    INNER JOIN life_course AS course ON course.course_id = `order`.course_id
	    INNER JOIN life_course_classify AS classify ON classify.course_classify_id = course.course_classify_id
	    INNER JOIN life_user AS `user` ON `user`.user_id = `order`.user_id
	    INNER JOIN life_business_address AS address ON address.business_address_id = course.business_address_id
	  where course.business_id = #{businessId}
        <if test="start != null">
            and `order`.use_time >= #{start}
        </if>
	    <if test="statues != null">
            <foreach collection="statues" item="item" open=" and `order`.status in (" separator="," close=")">
                #{item}
            </foreach>
        </if>
      order by `order`.use_time desc
    </select>
    <select id="getStatisticsMchPrice" resultType="java.math.BigDecimal">
        select sum(course.price) from life_order AS `order`
        INNER JOIN life_course AS course ON course.course_id = `order`.course_id
        where course.business_id = #{businessId} and `order`.status in (401,402)
        <if test="start != null">
            and `order`.use_time >= #{start}
        </if>
        group by course.business_id
    </select>
    <select id="getStatisticsMchCount" resultType="java.lang.Long">
        select count(0) from life_order AS `order`
        INNER JOIN life_course AS course ON course.course_id = `order`.course_id
        where course.business_id = #{businessId} and `order`.status in (401,402)
        <if test="start != null">
            and `order`.use_time >= #{start}
        </if>
        group by course.business_id
    </select>

    <select id="getMchOrderDetail" resultType="com.ruoyi.life.domain.vo.mch.LifeMchOrderDetailVo">
        SELECT
        	`order`.order_id AS orderId,
        	`order`.verification_code AS verificationCode,
        	`user`.nick_name AS nickName,
        	`order`.consume_time AS consumeTime,
        	`order`.STATUS AS `status`,
        	course.course_id AS courseId,
        	course.img_url AS imgUrl,
        	course.NAME AS courseName,
        	classify.img AS classifyImgUrl,
        	classify.course_classify_name AS classifyName,
        	`order`.use_time AS useTime,
        	address.business_address_name AS addressName,
        	course.age_onset AS ageOnset,
        	course.age_end AS ageEnd,
        	course.price AS price,
        	child.`name` AS salePeople,
        	`order`.linkman AS linkman,
        	`order`.phone AS linkmanPhone,
        	`order`.order_time AS orderTime,
        	coupon.NAME AS couponName,
        	coupon.remarks AS couponRemark,
        	`order`.remark AS remark,
        	`order`.mch_remark as mchRemark
        FROM
        	life_order AS `order`
        	INNER JOIN life_course AS course ON course.course_id = `order`.course_id
        	INNER JOIN life_course_classify AS classify ON classify.course_classify_id = course.course_classify_id
        	INNER JOIN life_user AS `user` ON `user`.user_id = `order`.user_id
        	INNER JOIN life_business_address AS address ON address.business_address_id = course.business_address_id
        	LEFT JOIN life_user_child AS child ON child.child_id = `order`.sale_user
        	LEFT JOIN life_coupon_receive AS receive ON receive.receive_id = `order`.coupon_id
        	LEFT JOIN life_coupon AS coupon ON coupon.coupon_id = receive.coupon_id
        where
            `order`.verification_code = #{verificationCode}
    </select>



    <update id="giveBusinessRemark">
        update life_order set mch_remark = #{param2}
        where order_id = #{param1}
    </update>


    <update id="set402Order">
        update life_order set status = 402
        where status = 201 and current_time >= date_add(use_time, interval course_duration minute)
    </update>

</mapper>